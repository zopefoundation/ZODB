Lock file support
=================

Obviously, this should move out of the ZODB package. :/

The ZODB lock_file module provides support for creating file system
locks.  These are locks that are implemented with lock files and
OS-provided locking facilities.  To create a lock, instantiate a
LockFile object with a file name:

    >>> import ZODB.lock_file
    >>> lock = ZODB.lock_file.LockFile('lock')

The lock contains the pid of the creating process:

    >>> import os
    >>> open('lock').read().strip() == str(os.getpid())
    True

If we try to lock the same name, we'll get a lock error:

    >>> try:
    ...     ZODB.lock_file.LockFile('lock')
    ... except ZODB.lock_file.LockError:
    ...     print "Can't lock file"
    Can't lock file

To release the lock, use it's close method:

    >>> lock.close()

The lock file is automatically removed:

    >>> os.path.exists('lock')
    False

Of course, now that we've released the lock, we can created it again:

    >>> lock = ZODB.lock_file.LockFile('lock')
    >>> lock.close()
    >>> os.path.exists('lock')
    False

It's OK if the file exists, say because it wasn't cleaned up properly:

    >>> _ = open('lock', 'w')
    >>> os.path.exists('lock')
    True
    >>> lock = ZODB.lock_file.LockFile('lock')
    >>> lock.close()
    >>> os.path.exists('lock')
    False

Of course, it's a bad idea to put precious data into a lock file.
